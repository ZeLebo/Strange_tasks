# 1 "lift2.pml"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 368 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "lift2.pml" 2
# 17 "lift2.pml"
 bool on_top_floor;
 bool on_bot_floor;


 bool top_call;
 bool bot_call;
 bool up_call;
 bool down_call;
 bool top_door_closed;
 bool bot_door_closed;






 bool top_call_LED;
 bool bot_call_LED;
 bool up_call_LED;
 bool down_call_LED;


 bool up;
 bool down;
# 53 "lift2.pml"
short v;
short coord;






mtype: FunStates = {Begin, up_down, check_ON_OFF, check_command, check_stop, motion, error, stop};


mtype : FunStates st_Elevator = stop;
mtype : FunStates st_top_call_Latch = stop;
mtype : FunStates st_bot_call_Latch = stop;
mtype : FunStates st_up_call_Latch = stop;
mtype : FunStates st_down_call_Latch = stop;
mtype : FunStates st_Motion_p = stop;
mtype : FunStates st_go_down = stop;
mtype : FunStates st_go_up = stop;



int time_Motion = -1;


mtype : process = { Environment_n, Elevator_n,
     top_call_Latch_n, bot_call_Latch_n,
     up_call_Latch_n, down_call_Latch_n,
     Motion_p_n, go_down_n, go_up_n};
chan turn = [ 1 ] of { mtype : process}
# 93 "lift2.pml"
bool act_go_down;
bool act_go_up;



proctype Environment() {
 do
 :: turn ? Environment_n;
  atomic{
  if
   :: top_call = true;
   :: top_call = false;
   :: bot_call = true;
   :: bot_call = false;
   :: up_call = true;
   :: up_call = false;
   :: down_call = true;
   :: down_call = false;
   :: top_door_closed = true;
   :: top_door_closed = false;
   :: bot_door_closed = true;
   :: bot_door_closed = false;
   :: else -> skip;
  fi;
  if
   :: ( time_Motion > -1 ) -> time_Motion++;
   :: else -> skip;
  fi;
  }
  turn ! Elevator_n;
 od;
 }



proctype Elevator() {
 do
 :: turn ? Elevator_n;
  atomic{
  if
   :: st_Elevator == Begin ->
    v = 0;
    coord = 0;
    st_Elevator = up_down;

   :: st_Elevator == up_down

    if
     :: up -> v = v - 1;;
     :: down -> v = v + 1;;
     :: else -> v = 0;
    fi
    if
     :: v > 5; -> v = 5;;
     :: v < -5; -> v = -5;;
     :: else -> skip;
    fi

    coord = coord + v;
    if
     :: (coord < 0) -> coord = 0;
     :: coord > 100; -> coord = 100;;
     :: else -> skip;
    fi

    on_top_floor = false;
    on_bot_floor = false;
    if
     :: (coord < 5) -> on_top_floor = true;
     :: (coord > 95) -> on_bot_floor = true;
     :: else -> skip;
    fi

   :: else -> skip;
  fi;
  }
  turn ! top_call_Latch_n;
 od;
 }




proctype top_call_Latch() {
 bool prev_in;
 bool prev_out;

 do
 :: turn ? top_call_Latch_n;
  atomic{
  if
   :: st_top_call_Latch == Begin ->
     prev_in = !top_call;
     prev_out = !top_door_closed;
     st_top_call_Latch = check_ON_OFF;

   :: st_top_call_Latch == check_ON_OFF ->
     if
      :: (top_call && !prev_in) -> top_call_LED = true;
      :: else -> skip;
     fi;
     if
      :: (!top_door_closed && prev_out) -> top_call_LED = false;
      :: else -> skip;
     fi;
     prev_in = top_call;
     prev_out = top_door_closed;

   :: else -> skip;
  fi;
  }
  turn ! bot_call_Latch_n;
 od;
 }

proctype bot_call_Latch() {
 bool prev_in;
 bool prev_out;

 do
 :: turn ? bot_call_Latch_n;
  atomic{
  if
   :: st_bot_call_Latch == Begin -> {
     prev_in = !bot_call;
     prev_out = !bot_door_closed;
     st_bot_call_Latch = check_ON_OFF;
    }
   :: st_bot_call_Latch == check_ON_OFF -> {
     if
      :: (bot_call && !prev_in) -> bot_call_LED = true;
      :: else -> skip;
     fi;
     if
      :: (!bot_door_closed && prev_out) -> bot_call_LED = false;
      :: else -> skip;
     fi;
     prev_in = bot_call;
     prev_out = bot_door_closed;
    }
   :: else -> skip;
  fi;
  }
  turn ! up_call_Latch_n;
 od;
 }

proctype up_call_Latch() {
 bool prev_in;
 bool prev_out;

 do
 :: turn ? up_call_Latch_n;
  atomic{
  if
   :: st_up_call_Latch == Begin -> {
     prev_in = !up_call;
     prev_out = !top_door_closed;
     st_up_call_Latch = check_ON_OFF;
    }
   :: st_up_call_Latch == check_ON_OFF -> {
     if
      :: (up_call && !prev_in) -> up_call_LED = true;
      :: else -> skip;
     fi;
     if
      :: (!top_door_closed && prev_out) -> up_call_LED = false;
      :: else -> skip;
     fi;
     prev_in = up_call;
     prev_out = top_door_closed;
    }
   :: else -> skip;
  fi;
  }
  turn ! down_call_Latch_n;
 od;
 }

proctype down_call_Latch() {
 bool prev_in;
 bool prev_out;

 do
 :: turn ? down_call_Latch_n;
  atomic{
  if
   :: st_down_call_Latch == Begin -> {
     prev_in = !down_call;
     prev_out = !bot_door_closed;
     st_down_call_Latch = check_ON_OFF;
    }
   :: st_down_call_Latch == check_ON_OFF -> {
     if
      :: (down_call && !prev_in) -> down_call_LED = true;
      :: else -> skip;
     fi;
     if
      :: (!bot_door_closed && prev_out) -> down_call_LED = false;
      :: else -> skip;
     fi;
     prev_in = down_call;
     prev_out = bot_door_closed;
    }
   :: else -> skip;
  fi;
  }
  turn ! Motion_p_n;
 od;
 }

proctype Motion_p() {

 do
 :: turn ? Motion_p_n;
  atomic{
  if
   :: st_Motion_p == check_command ->
    if
    :: (bot_call_LED) ->{
     st_go_down = motion;
     act_go_down = true;
     st_Motion_p = check_stop;
      time_Motion = -1;
      }
    :: else ->
     if
     :: (top_call_LED) -> {
      st_go_up = motion;
      act_go_up = true;
      st_Motion_p = check_stop;
      time_Motion = -1;
      }
     :: else ->
      if
      :: (down_call_LED) -> {
       st_go_down = motion;
       act_go_down = true;
       st_Motion_p = check_stop;
       time_Motion = -1;
       }
      :: else ->
       if
       :: (up_call_LED) -> {
        st_go_up = motion;
        act_go_up = true;
        st_Motion_p = check_stop;
        time_Motion = -1;
        }
       :: else ->
        if
        :: (on_top_floor && time_Motion == -1) -> time_Motion = 0;
        :: (on_top_floor && time_Motion == 20) -> {
         st_go_down = motion;
         act_go_down = true;
         time_Motion = -1;
         st_Motion_p = check_stop;
         }
        :: else -> skip;
        fi;
       fi;
      fi;
     fi;
    fi;
   :: st_Motion_p == check_stop ->
     if
      :: ((!act_go_down) && (!act_go_up)) ->
        st_Motion_p = check_command;
      :: else -> skip;
     fi;

   :: else -> skip;
  fi;
  }
  turn ! go_down_n;
 od;
 }

proctype go_down() {
 do
 :: turn ? go_down_n;
  atomic{
  if
   :: st_go_down == motion -> {
    if
     :: (top_door_closed && bot_door_closed) -> down = true;
     :: else -> skip;
    fi
    if
     :: (on_bot_floor) -> {
       down = false;
       st_go_down = stop;
       act_go_down = false;
      }
     :: else -> skip;
    fi
    }
   :: st_go_down == stop -> skip;
   :: else -> skip;
  fi;
  }
  turn ! go_up_n;
 od;
 }

proctype go_up() {
 do
 :: turn ? go_up_n;
  atomic{
  if
   :: st_go_up == motion -> {
    if
     :: (top_door_closed && bot_door_closed) -> up = true;
     :: else -> skip;
    fi
    if
     :: (on_top_floor) -> {
       up = false;
       st_go_up = stop;
       act_go_up = false;
      }
     :: else -> skip;
    fi
    }
   :: st_go_up == stop -> skip;
   :: else -> skip;
  fi;
  }
  turn ! Environment_n;
 od;
 }

init {



 run Environment();
 run Elevator();
 run top_call_Latch();
 run bot_call_Latch();
 run up_call_Latch();
 run down_call_Latch();
 run Motion_p();
 run go_down();
 run go_up();
# 449 "lift2.pml"
 st_Elevator = Begin;
 st_top_call_Latch = Begin;
 st_bot_call_Latch = Begin;
 st_up_call_Latch = Begin;
 st_down_call_Latch = Begin;
 st_Motion_p = check_command;


 turn ! Environment_n;
 }
